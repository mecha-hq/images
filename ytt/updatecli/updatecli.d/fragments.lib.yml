#! fragments.lib.yml

#@ def scm_mecha_images():
kind: github
spec:
  user: "{{ .github.user }}"
  email: "{{ .github.email }}"
  owner: mecha-hq
  repository: images
  token: '{{ requiredEnv "GITHUB_TOKEN" }}'
  username: "{{ .github.username }}"
  branch: main
  submodules: false
#@ end

#@ def actions(image):
update-deps:
  kind: "github/pullrequest"
  scmid: "mecha-images"
  spec:
    automerge: false
    mergemethod: "squash"
    description: #@ action_update_deps_description(image)
    labels:
      - "dependencies"
      -  #@ image
    title: #@ action_update_deps_title(image)
#@ end

#@ def action_update_deps_title(image):
#@   return "deps: update {} version".format(image)
#@ end

#@ def action_update_deps_description(image):
#@   return "update {} version".format(image)
#@ end

#@ def source_dockerimage(image, versionfilter_kind, versionfilter_pattern=None, tagfilter=None):
name: Get latest dockerhub release version
kind: dockerimage
spec:
  architectures:
    - linux/amd64
    - linux/arm64
  image: #@ image
  #@ if tagfilter:
  tagfilter: #@ tagfilter
  #@ end
  token: '{{ requiredEnv "DOCKERHUB_TOKEN" }}'
  username: "{{ .dockerhub.username }}"
  versionfilter:
    kind: #@ versionfilter_kind
    #@ if versionfilter_pattern:
    pattern: #@ versionfilter_pattern
    #@ end
transformers:
  - trimprefix: "v"
#@ end

#@ def source_githubrelease(owner, repository, versionfilter_kind, versionfilter_pattern=None):
name: Get latest github release version
kind: githubrelease
spec:
  owner: #@ owner
  repository: #@ repository
  token: '{{ requiredEnv "GITHUB_TOKEN" }}'
  username: "{{ .github.username }}"
  versionfilter:
    kind: #@ versionfilter_kind
    #@ if versionfilter_pattern:
    pattern: #@ versionfilter_pattern
    #@ end
transformers:
  - trimprefix: "v"
#@ end

#@ def source_npm(name, versionfilter_kind, versionfilter_pattern=None):
name: Get latest version from npm registry
kind: npm
spec:
  name: #@ name
  versionfilter:
    kind: #@ versionfilter_kind
    #@ if versionfilter_pattern:
    pattern: #@ versionfilter_pattern
    #@ end
#@ end

#@ def source_gittag(scmid, versionfilter_kind, versionfilter_pattern=None):
name: Get latest tag version from git repository
kind: gittag
scmid: #@ scmid
spec:
  versionfilter:
    kind: #@ versionfilter_kind
    #@ if versionfilter_pattern:
    pattern: #@ versionfilter_pattern
    #@ end
transformers:
  - trimprefix: "v"
#@ end

#@ def target_alpine(key, file, suffix):
name: Bump alpine version
kind: yaml
sourceid: alpine
scmid: mecha-images
transformers:
  - addprefix: "https://dl-cdn.alpinelinux.org/alpine/v"
  - addsuffix: #@ suffix
spec:
  key: #@ key
  file: #@ file
#@ end

#@ def target_image_apko(image, key, file):
name: #@ target_image_name(image)
kind: yaml
sourceid: #@ image
scmid: mecha-images
spec:
  key: #@ key
  file: #@ file
transformers:
  - addprefix: #@ target_image_apko_transformer_prefix(image)
  - addsuffix: "/packages"
#@ end

#@ def target_image_apko_transformer_prefix(image):
#@   return "@local dist/tools/{}/".format(image)
#@ end

#@ def target_image_melange(image, file):
name: #@ target_image_name(image)
kind: yaml
sourceid: #@ image
scmid: mecha-images
spec:
  key: $.package.version
  file: #@ file
#@ end

#@ def target_image_name(image):
#@   return "Bump {} version".format(image)
#@ end
