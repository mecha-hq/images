#! fragments.lib.yml

#@ def jobs_build(image, runs_on):
runs-on: #@ runs_on
permissions:
  contents: write
  id-token: write
  packages: write
  pages: write
steps:
  - #@ step_harden_runner()
  - #@ step_checkout()
  - #@ step_compute_image_version(image)
  - #@ step_draft_gh_release(image)
  - #@ step_build_image(image)
  - #@ step_scan_image(image)
  - #@ step_generate_pages(image)
  - #@ step_publish_gh_release(image)
#@ end

#@ def tool_on(image):
workflow_dispatch:
push:
  branches:
    - main
  paths:
    #! tool-specific paths
    -  #@ "tools/"+ image + "/**"
pull_request:
  paths:
    #! tool-specific paths
    -  #@ "tools/"+ image + "/**"
#@ end

#@ def updatecli_on(cron):
workflow_dispatch: {}
schedule:
  - cron: #@ cron
#@ end

#@ def updatecli_permissions():
contents: "write"
pull-requests: "write"
#@ end

#@ def updatecli_jobs(scope):
updatecli:
  runs-on: "ubuntu-24.04"
  steps:
    - #@ step_harden_runner()
    - #@ step_checkout()
    - name: Install Updatecli in the runner
      uses: updatecli/updatecli-action@v2
      with:
        version: v0.104.0
    - name: Run Updatecli for dependencies in Dry Run mode
      run: #@ "updatecli diff --config ./updatecli/updatecli.d/%s --values updatecli/values.yaml --values updatecli/values.ci.yaml" % scope
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Run Updatecli for dependencies
      run: #@ "updatecli apply --config ./updatecli/updatecli.d/%s --values updatecli/values.yaml --values updatecli/values.ci.yaml" % scope
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
#@ end

#@ def step_harden_runner():
name: Harden Runner
uses: step-security/harden-runner@v2
with:
  egress-policy: audit
#@ end

#@ def step_checkout():
name: Checkout code
uses: actions/checkout@v4
with:
  token: "${{ secrets.CI_TOKEN }}"
  submodules: recursive
  fetch-depth: 0
#@ end

#@ def step_get_tools_list():
name: Get tools list
id: get-tools
run: |
  tools=$(ls -1 tools/ | jq -R -s -c 'split("\n")[:-1]')
  echo "tools=$tools" >> "${GITHUB_OUTPUT}"
#@ end

#@ def step_install_mise():
name: Install mise
uses: jdx/mise-action@v2
with:
  version: 2025.4.0
#@ end

#@ def step_activate_mise():
name: Activate mise
shell: sh
run: echo 'eval "$(~/.local/share/mise/bin/mise activate bash)"' >> ~/.bashrc
#@ end

#@ def step_make(target):
name: #@ "Make %s" % target
shell: sh
run: #@ "make %s" % target
#@ end

#@ def step_compute_image_version(image):
name: Determine image version
shell: sh
run: #@ "echo IMAGE_VERSION=$(scripts/image-version.sh %s) >> ${GITHUB_ENV}" % image
#@ end

#@ def step_draft_gh_release(image):
name: Draft GitHub Release
shell: sh
run: #@ "make draft-gh-release IMAGE=%s VERSION=${{ env.IMAGE_VERSION }}" % image
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#@ end

#@ def step_publish_gh_release(image):
name: Publish GitHub Release
shell: sh
run: #@ "make publish-gh-release IMAGE=%s VERSION=${{ env.IMAGE_VERSION }}" % image
if: ${{ inputs.publish == 'true' }}
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#@ end

#@ def step_build_image(image, publish="${{ github.ref == 'refs/heads/main' && 'true' || 'false' }}"):
name: Build image
uses: ./.github/actions/image
with:
  container_registry_password: ${{ secrets.CI_TOKEN }}
  melange_signing_key: ${{ secrets.MELANGE_SIGNING_KEY }}
  image_name: #@ image
  publish: #@ publish
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#@ end

#@ def step_scan_image(image, publish="${{ github.ref == 'refs/heads/main' && 'true' || 'false' }}"):
name: Scan image
uses: ./.github/actions/scans
with:
  container_registry_password: ${{ secrets.CI_TOKEN }}
  github_token: ${{ secrets.GITHUB_TOKEN }}
  snyk_org: ${{ secrets.SNYK_ORG }}
  snyk_token: ${{ secrets.SNYK_TOKEN }}
  image_name: #@ image
  publish: #@ publish
  pull_images: "false"
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#@ end

#@ def step_generate_pages(subject, publish="${{ github.ref == 'refs/heads/main' && 'true' || 'false' }}"):
name: Generate pages
uses: ./.github/actions/pages
with:
  publish: #@ publish
  content_subject: #@ subject
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CI_TOKEN: ${{ secrets.CI_TOKEN }}
#@ end
